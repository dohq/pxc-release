// Code generated by counterfeiter. DO NOT EDIT.
package jumpstartfakes

import (
	"lf-agent/jumpstart"
	"sync"
)

type FakeStreamingBackupClient struct {
	StreamBackupStub        func() error
	streamBackupMutex       sync.RWMutex
	streamBackupArgsForCall []struct{}
	streamBackupReturns     struct {
		result1 error
	}
	streamBackupReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStreamingBackupClient) StreamBackup() error {
	fake.streamBackupMutex.Lock()
	ret, specificReturn := fake.streamBackupReturnsOnCall[len(fake.streamBackupArgsForCall)]
	fake.streamBackupArgsForCall = append(fake.streamBackupArgsForCall, struct{}{})
	fake.recordInvocation("StreamBackup", []interface{}{})
	fake.streamBackupMutex.Unlock()
	if fake.StreamBackupStub != nil {
		return fake.StreamBackupStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.streamBackupReturns.result1
}

func (fake *FakeStreamingBackupClient) StreamBackupCallCount() int {
	fake.streamBackupMutex.RLock()
	defer fake.streamBackupMutex.RUnlock()
	return len(fake.streamBackupArgsForCall)
}

func (fake *FakeStreamingBackupClient) StreamBackupReturns(result1 error) {
	fake.StreamBackupStub = nil
	fake.streamBackupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStreamingBackupClient) StreamBackupReturnsOnCall(i int, result1 error) {
	fake.StreamBackupStub = nil
	if fake.streamBackupReturnsOnCall == nil {
		fake.streamBackupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.streamBackupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStreamingBackupClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.streamBackupMutex.RLock()
	defer fake.streamBackupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStreamingBackupClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ jumpstart.StreamingBackupClient = new(FakeStreamingBackupClient)
