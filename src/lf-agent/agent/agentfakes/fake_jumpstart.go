// Code generated by counterfeiter. DO NOT EDIT.
package agentfakes

import (
	"lf-agent/agent"
	"sync"
)

type FakeJumpstart struct {
	PrepareStub        func() error
	prepareMutex       sync.RWMutex
	prepareArgsForCall []struct{}
	prepareReturns     struct {
		result1 error
	}
	prepareReturnsOnCall map[int]struct {
		result1 error
	}
	PerformStub        func() error
	performMutex       sync.RWMutex
	performArgsForCall []struct{}
	performReturns     struct {
		result1 error
	}
	performReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJumpstart) Prepare() error {
	fake.prepareMutex.Lock()
	ret, specificReturn := fake.prepareReturnsOnCall[len(fake.prepareArgsForCall)]
	fake.prepareArgsForCall = append(fake.prepareArgsForCall, struct{}{})
	fake.recordInvocation("Prepare", []interface{}{})
	fake.prepareMutex.Unlock()
	if fake.PrepareStub != nil {
		return fake.PrepareStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.prepareReturns.result1
}

func (fake *FakeJumpstart) PrepareCallCount() int {
	fake.prepareMutex.RLock()
	defer fake.prepareMutex.RUnlock()
	return len(fake.prepareArgsForCall)
}

func (fake *FakeJumpstart) PrepareReturns(result1 error) {
	fake.PrepareStub = nil
	fake.prepareReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeJumpstart) PrepareReturnsOnCall(i int, result1 error) {
	fake.PrepareStub = nil
	if fake.prepareReturnsOnCall == nil {
		fake.prepareReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.prepareReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeJumpstart) Perform() error {
	fake.performMutex.Lock()
	ret, specificReturn := fake.performReturnsOnCall[len(fake.performArgsForCall)]
	fake.performArgsForCall = append(fake.performArgsForCall, struct{}{})
	fake.recordInvocation("Perform", []interface{}{})
	fake.performMutex.Unlock()
	if fake.PerformStub != nil {
		return fake.PerformStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.performReturns.result1
}

func (fake *FakeJumpstart) PerformCallCount() int {
	fake.performMutex.RLock()
	defer fake.performMutex.RUnlock()
	return len(fake.performArgsForCall)
}

func (fake *FakeJumpstart) PerformReturns(result1 error) {
	fake.PerformStub = nil
	fake.performReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeJumpstart) PerformReturnsOnCall(i int, result1 error) {
	fake.PerformStub = nil
	if fake.performReturnsOnCall == nil {
		fake.performReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.performReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeJumpstart) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.prepareMutex.RLock()
	defer fake.prepareMutex.RUnlock()
	fake.performMutex.RLock()
	defer fake.performMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJumpstart) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ agent.Jumpstart = new(FakeJumpstart)
