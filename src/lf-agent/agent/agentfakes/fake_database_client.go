// Code generated by counterfeiter. DO NOT EDIT.
package agentfakes

import (
	"lf-agent/agent"
	"sync"
)

type FakeDatabaseClient struct {
	WaitForReplicationStub        func() error
	waitForReplicationMutex       sync.RWMutex
	waitForReplicationArgsForCall []struct{}
	waitForReplicationReturns     struct {
		result1 error
	}
	waitForReplicationReturnsOnCall map[int]struct {
		result1 error
	}
	MakeFollowerStub        func() error
	makeFollowerMutex       sync.RWMutex
	makeFollowerArgsForCall []struct{}
	makeFollowerReturns     struct {
		result1 error
	}
	makeFollowerReturnsOnCall map[int]struct {
		result1 error
	}
	MakeReadOnlyStub        func() error
	makeReadOnlyMutex       sync.RWMutex
	makeReadOnlyArgsForCall []struct{}
	makeReadOnlyReturns     struct {
		result1 error
	}
	makeReadOnlyReturnsOnCall map[int]struct {
		result1 error
	}
	StatusStub        func() (*agent.DBStatus, error)
	statusMutex       sync.RWMutex
	statusArgsForCall []struct{}
	statusReturns     struct {
		result1 *agent.DBStatus
		result2 error
	}
	statusReturnsOnCall map[int]struct {
		result1 *agent.DBStatus
		result2 error
	}
	WaitForReceivedTransactionsStub        func(gtidExecuted string) error
	waitForReceivedTransactionsMutex       sync.RWMutex
	waitForReceivedTransactionsArgsForCall []struct {
		gtidExecuted string
	}
	waitForReceivedTransactionsReturns struct {
		result1 error
	}
	waitForReceivedTransactionsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDatabaseClient) WaitForReplication() error {
	fake.waitForReplicationMutex.Lock()
	ret, specificReturn := fake.waitForReplicationReturnsOnCall[len(fake.waitForReplicationArgsForCall)]
	fake.waitForReplicationArgsForCall = append(fake.waitForReplicationArgsForCall, struct{}{})
	fake.recordInvocation("WaitForReplication", []interface{}{})
	fake.waitForReplicationMutex.Unlock()
	if fake.WaitForReplicationStub != nil {
		return fake.WaitForReplicationStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitForReplicationReturns.result1
}

func (fake *FakeDatabaseClient) WaitForReplicationCallCount() int {
	fake.waitForReplicationMutex.RLock()
	defer fake.waitForReplicationMutex.RUnlock()
	return len(fake.waitForReplicationArgsForCall)
}

func (fake *FakeDatabaseClient) WaitForReplicationReturns(result1 error) {
	fake.WaitForReplicationStub = nil
	fake.waitForReplicationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabaseClient) WaitForReplicationReturnsOnCall(i int, result1 error) {
	fake.WaitForReplicationStub = nil
	if fake.waitForReplicationReturnsOnCall == nil {
		fake.waitForReplicationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForReplicationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabaseClient) MakeFollower() error {
	fake.makeFollowerMutex.Lock()
	ret, specificReturn := fake.makeFollowerReturnsOnCall[len(fake.makeFollowerArgsForCall)]
	fake.makeFollowerArgsForCall = append(fake.makeFollowerArgsForCall, struct{}{})
	fake.recordInvocation("MakeFollower", []interface{}{})
	fake.makeFollowerMutex.Unlock()
	if fake.MakeFollowerStub != nil {
		return fake.MakeFollowerStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.makeFollowerReturns.result1
}

func (fake *FakeDatabaseClient) MakeFollowerCallCount() int {
	fake.makeFollowerMutex.RLock()
	defer fake.makeFollowerMutex.RUnlock()
	return len(fake.makeFollowerArgsForCall)
}

func (fake *FakeDatabaseClient) MakeFollowerReturns(result1 error) {
	fake.MakeFollowerStub = nil
	fake.makeFollowerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabaseClient) MakeFollowerReturnsOnCall(i int, result1 error) {
	fake.MakeFollowerStub = nil
	if fake.makeFollowerReturnsOnCall == nil {
		fake.makeFollowerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeFollowerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabaseClient) MakeReadOnly() error {
	fake.makeReadOnlyMutex.Lock()
	ret, specificReturn := fake.makeReadOnlyReturnsOnCall[len(fake.makeReadOnlyArgsForCall)]
	fake.makeReadOnlyArgsForCall = append(fake.makeReadOnlyArgsForCall, struct{}{})
	fake.recordInvocation("MakeReadOnly", []interface{}{})
	fake.makeReadOnlyMutex.Unlock()
	if fake.MakeReadOnlyStub != nil {
		return fake.MakeReadOnlyStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.makeReadOnlyReturns.result1
}

func (fake *FakeDatabaseClient) MakeReadOnlyCallCount() int {
	fake.makeReadOnlyMutex.RLock()
	defer fake.makeReadOnlyMutex.RUnlock()
	return len(fake.makeReadOnlyArgsForCall)
}

func (fake *FakeDatabaseClient) MakeReadOnlyReturns(result1 error) {
	fake.MakeReadOnlyStub = nil
	fake.makeReadOnlyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabaseClient) MakeReadOnlyReturnsOnCall(i int, result1 error) {
	fake.MakeReadOnlyStub = nil
	if fake.makeReadOnlyReturnsOnCall == nil {
		fake.makeReadOnlyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeReadOnlyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabaseClient) Status() (*agent.DBStatus, error) {
	fake.statusMutex.Lock()
	ret, specificReturn := fake.statusReturnsOnCall[len(fake.statusArgsForCall)]
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct{}{})
	fake.recordInvocation("Status", []interface{}{})
	fake.statusMutex.Unlock()
	if fake.StatusStub != nil {
		return fake.StatusStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.statusReturns.result1, fake.statusReturns.result2
}

func (fake *FakeDatabaseClient) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeDatabaseClient) StatusReturns(result1 *agent.DBStatus, result2 error) {
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 *agent.DBStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeDatabaseClient) StatusReturnsOnCall(i int, result1 *agent.DBStatus, result2 error) {
	fake.StatusStub = nil
	if fake.statusReturnsOnCall == nil {
		fake.statusReturnsOnCall = make(map[int]struct {
			result1 *agent.DBStatus
			result2 error
		})
	}
	fake.statusReturnsOnCall[i] = struct {
		result1 *agent.DBStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeDatabaseClient) WaitForReceivedTransactions(gtidExecuted string) error {
	fake.waitForReceivedTransactionsMutex.Lock()
	ret, specificReturn := fake.waitForReceivedTransactionsReturnsOnCall[len(fake.waitForReceivedTransactionsArgsForCall)]
	fake.waitForReceivedTransactionsArgsForCall = append(fake.waitForReceivedTransactionsArgsForCall, struct {
		gtidExecuted string
	}{gtidExecuted})
	fake.recordInvocation("WaitForReceivedTransactions", []interface{}{gtidExecuted})
	fake.waitForReceivedTransactionsMutex.Unlock()
	if fake.WaitForReceivedTransactionsStub != nil {
		return fake.WaitForReceivedTransactionsStub(gtidExecuted)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitForReceivedTransactionsReturns.result1
}

func (fake *FakeDatabaseClient) WaitForReceivedTransactionsCallCount() int {
	fake.waitForReceivedTransactionsMutex.RLock()
	defer fake.waitForReceivedTransactionsMutex.RUnlock()
	return len(fake.waitForReceivedTransactionsArgsForCall)
}

func (fake *FakeDatabaseClient) WaitForReceivedTransactionsArgsForCall(i int) string {
	fake.waitForReceivedTransactionsMutex.RLock()
	defer fake.waitForReceivedTransactionsMutex.RUnlock()
	return fake.waitForReceivedTransactionsArgsForCall[i].gtidExecuted
}

func (fake *FakeDatabaseClient) WaitForReceivedTransactionsReturns(result1 error) {
	fake.WaitForReceivedTransactionsStub = nil
	fake.waitForReceivedTransactionsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabaseClient) WaitForReceivedTransactionsReturnsOnCall(i int, result1 error) {
	fake.WaitForReceivedTransactionsStub = nil
	if fake.waitForReceivedTransactionsReturnsOnCall == nil {
		fake.waitForReceivedTransactionsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForReceivedTransactionsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabaseClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.waitForReplicationMutex.RLock()
	defer fake.waitForReplicationMutex.RUnlock()
	fake.makeFollowerMutex.RLock()
	defer fake.makeFollowerMutex.RUnlock()
	fake.makeReadOnlyMutex.RLock()
	defer fake.makeReadOnlyMutex.RUnlock()
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	fake.waitForReceivedTransactionsMutex.RLock()
	defer fake.waitForReceivedTransactionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDatabaseClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ agent.DatabaseClient = new(FakeDatabaseClient)
