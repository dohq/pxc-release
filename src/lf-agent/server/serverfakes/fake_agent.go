// Code generated by counterfeiter. DO NOT EDIT.
package serverfakes

import (
	"lf-agent/agent"
	"lf-agent/server"
	"sync"
)

type FakeAgent struct {
	MakeFollowerStub        func() error
	makeFollowerMutex       sync.RWMutex
	makeFollowerArgsForCall []struct{}
	makeFollowerReturns     struct {
		result1 error
	}
	makeFollowerReturnsOnCall map[int]struct {
		result1 error
	}
	MakeLeaderStub        func(failover bool) error
	makeLeaderMutex       sync.RWMutex
	makeLeaderArgsForCall []struct {
		failover bool
	}
	makeLeaderReturns struct {
		result1 error
	}
	makeLeaderReturnsOnCall map[int]struct {
		result1 error
	}
	CheckIfPromotableStub        func() error
	checkIfPromotableMutex       sync.RWMutex
	checkIfPromotableArgsForCall []struct{}
	checkIfPromotableReturns     struct {
		result1 error
	}
	checkIfPromotableReturnsOnCall map[int]struct {
		result1 error
	}
	ToggleHeartbeatsStub        func() error
	toggleHeartbeatsMutex       sync.RWMutex
	toggleHeartbeatsArgsForCall []struct{}
	toggleHeartbeatsReturns     struct {
		result1 error
	}
	toggleHeartbeatsReturnsOnCall map[int]struct {
		result1 error
	}
	MakeReadOnlyStub        func() error
	makeReadOnlyMutex       sync.RWMutex
	makeReadOnlyArgsForCall []struct{}
	makeReadOnlyReturns     struct {
		result1 error
	}
	makeReadOnlyReturnsOnCall map[int]struct {
		result1 error
	}
	MySQLStatusStub        func() (*agent.DBStatus, error)
	mySQLStatusMutex       sync.RWMutex
	mySQLStatusArgsForCall []struct{}
	mySQLStatusReturns     struct {
		result1 *agent.DBStatus
		result2 error
	}
	mySQLStatusReturnsOnCall map[int]struct {
		result1 *agent.DBStatus
		result2 error
	}
	SyncStub        func(peerGTIDExecuted string) error
	syncMutex       sync.RWMutex
	syncArgsForCall []struct {
		peerGTIDExecuted string
	}
	syncReturns struct {
		result1 error
	}
	syncReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAgent) MakeFollower() error {
	fake.makeFollowerMutex.Lock()
	ret, specificReturn := fake.makeFollowerReturnsOnCall[len(fake.makeFollowerArgsForCall)]
	fake.makeFollowerArgsForCall = append(fake.makeFollowerArgsForCall, struct{}{})
	fake.recordInvocation("MakeFollower", []interface{}{})
	fake.makeFollowerMutex.Unlock()
	if fake.MakeFollowerStub != nil {
		return fake.MakeFollowerStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.makeFollowerReturns.result1
}

func (fake *FakeAgent) MakeFollowerCallCount() int {
	fake.makeFollowerMutex.RLock()
	defer fake.makeFollowerMutex.RUnlock()
	return len(fake.makeFollowerArgsForCall)
}

func (fake *FakeAgent) MakeFollowerReturns(result1 error) {
	fake.MakeFollowerStub = nil
	fake.makeFollowerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) MakeFollowerReturnsOnCall(i int, result1 error) {
	fake.MakeFollowerStub = nil
	if fake.makeFollowerReturnsOnCall == nil {
		fake.makeFollowerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeFollowerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) MakeLeader(failover bool) error {
	fake.makeLeaderMutex.Lock()
	ret, specificReturn := fake.makeLeaderReturnsOnCall[len(fake.makeLeaderArgsForCall)]
	fake.makeLeaderArgsForCall = append(fake.makeLeaderArgsForCall, struct {
		failover bool
	}{failover})
	fake.recordInvocation("MakeLeader", []interface{}{failover})
	fake.makeLeaderMutex.Unlock()
	if fake.MakeLeaderStub != nil {
		return fake.MakeLeaderStub(failover)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.makeLeaderReturns.result1
}

func (fake *FakeAgent) MakeLeaderCallCount() int {
	fake.makeLeaderMutex.RLock()
	defer fake.makeLeaderMutex.RUnlock()
	return len(fake.makeLeaderArgsForCall)
}

func (fake *FakeAgent) MakeLeaderArgsForCall(i int) bool {
	fake.makeLeaderMutex.RLock()
	defer fake.makeLeaderMutex.RUnlock()
	return fake.makeLeaderArgsForCall[i].failover
}

func (fake *FakeAgent) MakeLeaderReturns(result1 error) {
	fake.MakeLeaderStub = nil
	fake.makeLeaderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) MakeLeaderReturnsOnCall(i int, result1 error) {
	fake.MakeLeaderStub = nil
	if fake.makeLeaderReturnsOnCall == nil {
		fake.makeLeaderReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeLeaderReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) CheckIfPromotable() error {
	fake.checkIfPromotableMutex.Lock()
	ret, specificReturn := fake.checkIfPromotableReturnsOnCall[len(fake.checkIfPromotableArgsForCall)]
	fake.checkIfPromotableArgsForCall = append(fake.checkIfPromotableArgsForCall, struct{}{})
	fake.recordInvocation("CheckIfPromotable", []interface{}{})
	fake.checkIfPromotableMutex.Unlock()
	if fake.CheckIfPromotableStub != nil {
		return fake.CheckIfPromotableStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.checkIfPromotableReturns.result1
}

func (fake *FakeAgent) CheckIfPromotableCallCount() int {
	fake.checkIfPromotableMutex.RLock()
	defer fake.checkIfPromotableMutex.RUnlock()
	return len(fake.checkIfPromotableArgsForCall)
}

func (fake *FakeAgent) CheckIfPromotableReturns(result1 error) {
	fake.CheckIfPromotableStub = nil
	fake.checkIfPromotableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) CheckIfPromotableReturnsOnCall(i int, result1 error) {
	fake.CheckIfPromotableStub = nil
	if fake.checkIfPromotableReturnsOnCall == nil {
		fake.checkIfPromotableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.checkIfPromotableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) ToggleHeartbeats() error {
	fake.toggleHeartbeatsMutex.Lock()
	ret, specificReturn := fake.toggleHeartbeatsReturnsOnCall[len(fake.toggleHeartbeatsArgsForCall)]
	fake.toggleHeartbeatsArgsForCall = append(fake.toggleHeartbeatsArgsForCall, struct{}{})
	fake.recordInvocation("ToggleHeartbeats", []interface{}{})
	fake.toggleHeartbeatsMutex.Unlock()
	if fake.ToggleHeartbeatsStub != nil {
		return fake.ToggleHeartbeatsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.toggleHeartbeatsReturns.result1
}

func (fake *FakeAgent) ToggleHeartbeatsCallCount() int {
	fake.toggleHeartbeatsMutex.RLock()
	defer fake.toggleHeartbeatsMutex.RUnlock()
	return len(fake.toggleHeartbeatsArgsForCall)
}

func (fake *FakeAgent) ToggleHeartbeatsReturns(result1 error) {
	fake.ToggleHeartbeatsStub = nil
	fake.toggleHeartbeatsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) ToggleHeartbeatsReturnsOnCall(i int, result1 error) {
	fake.ToggleHeartbeatsStub = nil
	if fake.toggleHeartbeatsReturnsOnCall == nil {
		fake.toggleHeartbeatsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.toggleHeartbeatsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) MakeReadOnly() error {
	fake.makeReadOnlyMutex.Lock()
	ret, specificReturn := fake.makeReadOnlyReturnsOnCall[len(fake.makeReadOnlyArgsForCall)]
	fake.makeReadOnlyArgsForCall = append(fake.makeReadOnlyArgsForCall, struct{}{})
	fake.recordInvocation("MakeReadOnly", []interface{}{})
	fake.makeReadOnlyMutex.Unlock()
	if fake.MakeReadOnlyStub != nil {
		return fake.MakeReadOnlyStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.makeReadOnlyReturns.result1
}

func (fake *FakeAgent) MakeReadOnlyCallCount() int {
	fake.makeReadOnlyMutex.RLock()
	defer fake.makeReadOnlyMutex.RUnlock()
	return len(fake.makeReadOnlyArgsForCall)
}

func (fake *FakeAgent) MakeReadOnlyReturns(result1 error) {
	fake.MakeReadOnlyStub = nil
	fake.makeReadOnlyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) MakeReadOnlyReturnsOnCall(i int, result1 error) {
	fake.MakeReadOnlyStub = nil
	if fake.makeReadOnlyReturnsOnCall == nil {
		fake.makeReadOnlyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeReadOnlyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) MySQLStatus() (*agent.DBStatus, error) {
	fake.mySQLStatusMutex.Lock()
	ret, specificReturn := fake.mySQLStatusReturnsOnCall[len(fake.mySQLStatusArgsForCall)]
	fake.mySQLStatusArgsForCall = append(fake.mySQLStatusArgsForCall, struct{}{})
	fake.recordInvocation("MySQLStatus", []interface{}{})
	fake.mySQLStatusMutex.Unlock()
	if fake.MySQLStatusStub != nil {
		return fake.MySQLStatusStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.mySQLStatusReturns.result1, fake.mySQLStatusReturns.result2
}

func (fake *FakeAgent) MySQLStatusCallCount() int {
	fake.mySQLStatusMutex.RLock()
	defer fake.mySQLStatusMutex.RUnlock()
	return len(fake.mySQLStatusArgsForCall)
}

func (fake *FakeAgent) MySQLStatusReturns(result1 *agent.DBStatus, result2 error) {
	fake.MySQLStatusStub = nil
	fake.mySQLStatusReturns = struct {
		result1 *agent.DBStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeAgent) MySQLStatusReturnsOnCall(i int, result1 *agent.DBStatus, result2 error) {
	fake.MySQLStatusStub = nil
	if fake.mySQLStatusReturnsOnCall == nil {
		fake.mySQLStatusReturnsOnCall = make(map[int]struct {
			result1 *agent.DBStatus
			result2 error
		})
	}
	fake.mySQLStatusReturnsOnCall[i] = struct {
		result1 *agent.DBStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeAgent) Sync(peerGTIDExecuted string) error {
	fake.syncMutex.Lock()
	ret, specificReturn := fake.syncReturnsOnCall[len(fake.syncArgsForCall)]
	fake.syncArgsForCall = append(fake.syncArgsForCall, struct {
		peerGTIDExecuted string
	}{peerGTIDExecuted})
	fake.recordInvocation("Sync", []interface{}{peerGTIDExecuted})
	fake.syncMutex.Unlock()
	if fake.SyncStub != nil {
		return fake.SyncStub(peerGTIDExecuted)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.syncReturns.result1
}

func (fake *FakeAgent) SyncCallCount() int {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return len(fake.syncArgsForCall)
}

func (fake *FakeAgent) SyncArgsForCall(i int) string {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return fake.syncArgsForCall[i].peerGTIDExecuted
}

func (fake *FakeAgent) SyncReturns(result1 error) {
	fake.SyncStub = nil
	fake.syncReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) SyncReturnsOnCall(i int, result1 error) {
	fake.SyncStub = nil
	if fake.syncReturnsOnCall == nil {
		fake.syncReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.syncReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.makeFollowerMutex.RLock()
	defer fake.makeFollowerMutex.RUnlock()
	fake.makeLeaderMutex.RLock()
	defer fake.makeLeaderMutex.RUnlock()
	fake.checkIfPromotableMutex.RLock()
	defer fake.checkIfPromotableMutex.RUnlock()
	fake.toggleHeartbeatsMutex.RLock()
	defer fake.toggleHeartbeatsMutex.RUnlock()
	fake.makeReadOnlyMutex.RLock()
	defer fake.makeReadOnlyMutex.RUnlock()
	fake.mySQLStatusMutex.RLock()
	defer fake.mySQLStatusMutex.RUnlock()
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAgent) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.Agent = new(FakeAgent)
