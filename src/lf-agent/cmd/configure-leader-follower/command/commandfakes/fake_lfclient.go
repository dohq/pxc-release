// Code generated by counterfeiter. DO NOT EDIT.
package commandfakes

import (
	"lf-agent/agent"
	"lf-agent/cmd/configure-leader-follower/command"
	"sync"
)

type FakeLFClient struct {
	HostnameStub        func() string
	hostnameMutex       sync.RWMutex
	hostnameArgsForCall []struct{}
	hostnameReturns     struct {
		result1 string
	}
	hostnameReturnsOnCall map[int]struct {
		result1 string
	}
	MakeLeaderStub        func(failover bool) error
	makeLeaderMutex       sync.RWMutex
	makeLeaderArgsForCall []struct {
		failover bool
	}
	makeLeaderReturns struct {
		result1 error
	}
	makeLeaderReturnsOnCall map[int]struct {
		result1 error
	}
	MakeFollowerStub        func() error
	makeFollowerMutex       sync.RWMutex
	makeFollowerArgsForCall []struct{}
	makeFollowerReturns     struct {
		result1 error
	}
	makeFollowerReturnsOnCall map[int]struct {
		result1 error
	}
	MakeReadOnlyStub        func() error
	makeReadOnlyMutex       sync.RWMutex
	makeReadOnlyArgsForCall []struct{}
	makeReadOnlyReturns     struct {
		result1 error
	}
	makeReadOnlyReturnsOnCall map[int]struct {
		result1 error
	}
	StatusStub        func() (*agent.DBStatus, error)
	statusMutex       sync.RWMutex
	statusArgsForCall []struct{}
	statusReturns     struct {
		result1 *agent.DBStatus
		result2 error
	}
	statusReturnsOnCall map[int]struct {
		result1 *agent.DBStatus
		result2 error
	}
	SyncStub        func(peerGtidExecuted string) error
	syncMutex       sync.RWMutex
	syncArgsForCall []struct {
		peerGtidExecuted string
	}
	syncReturns struct {
		result1 error
	}
	syncReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLFClient) Hostname() string {
	fake.hostnameMutex.Lock()
	ret, specificReturn := fake.hostnameReturnsOnCall[len(fake.hostnameArgsForCall)]
	fake.hostnameArgsForCall = append(fake.hostnameArgsForCall, struct{}{})
	fake.recordInvocation("Hostname", []interface{}{})
	fake.hostnameMutex.Unlock()
	if fake.HostnameStub != nil {
		return fake.HostnameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.hostnameReturns.result1
}

func (fake *FakeLFClient) HostnameCallCount() int {
	fake.hostnameMutex.RLock()
	defer fake.hostnameMutex.RUnlock()
	return len(fake.hostnameArgsForCall)
}

func (fake *FakeLFClient) HostnameReturns(result1 string) {
	fake.HostnameStub = nil
	fake.hostnameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLFClient) HostnameReturnsOnCall(i int, result1 string) {
	fake.HostnameStub = nil
	if fake.hostnameReturnsOnCall == nil {
		fake.hostnameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.hostnameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeLFClient) MakeLeader(failover bool) error {
	fake.makeLeaderMutex.Lock()
	ret, specificReturn := fake.makeLeaderReturnsOnCall[len(fake.makeLeaderArgsForCall)]
	fake.makeLeaderArgsForCall = append(fake.makeLeaderArgsForCall, struct {
		failover bool
	}{failover})
	fake.recordInvocation("MakeLeader", []interface{}{failover})
	fake.makeLeaderMutex.Unlock()
	if fake.MakeLeaderStub != nil {
		return fake.MakeLeaderStub(failover)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.makeLeaderReturns.result1
}

func (fake *FakeLFClient) MakeLeaderCallCount() int {
	fake.makeLeaderMutex.RLock()
	defer fake.makeLeaderMutex.RUnlock()
	return len(fake.makeLeaderArgsForCall)
}

func (fake *FakeLFClient) MakeLeaderArgsForCall(i int) bool {
	fake.makeLeaderMutex.RLock()
	defer fake.makeLeaderMutex.RUnlock()
	return fake.makeLeaderArgsForCall[i].failover
}

func (fake *FakeLFClient) MakeLeaderReturns(result1 error) {
	fake.MakeLeaderStub = nil
	fake.makeLeaderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLFClient) MakeLeaderReturnsOnCall(i int, result1 error) {
	fake.MakeLeaderStub = nil
	if fake.makeLeaderReturnsOnCall == nil {
		fake.makeLeaderReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeLeaderReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLFClient) MakeFollower() error {
	fake.makeFollowerMutex.Lock()
	ret, specificReturn := fake.makeFollowerReturnsOnCall[len(fake.makeFollowerArgsForCall)]
	fake.makeFollowerArgsForCall = append(fake.makeFollowerArgsForCall, struct{}{})
	fake.recordInvocation("MakeFollower", []interface{}{})
	fake.makeFollowerMutex.Unlock()
	if fake.MakeFollowerStub != nil {
		return fake.MakeFollowerStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.makeFollowerReturns.result1
}

func (fake *FakeLFClient) MakeFollowerCallCount() int {
	fake.makeFollowerMutex.RLock()
	defer fake.makeFollowerMutex.RUnlock()
	return len(fake.makeFollowerArgsForCall)
}

func (fake *FakeLFClient) MakeFollowerReturns(result1 error) {
	fake.MakeFollowerStub = nil
	fake.makeFollowerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLFClient) MakeFollowerReturnsOnCall(i int, result1 error) {
	fake.MakeFollowerStub = nil
	if fake.makeFollowerReturnsOnCall == nil {
		fake.makeFollowerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeFollowerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLFClient) MakeReadOnly() error {
	fake.makeReadOnlyMutex.Lock()
	ret, specificReturn := fake.makeReadOnlyReturnsOnCall[len(fake.makeReadOnlyArgsForCall)]
	fake.makeReadOnlyArgsForCall = append(fake.makeReadOnlyArgsForCall, struct{}{})
	fake.recordInvocation("MakeReadOnly", []interface{}{})
	fake.makeReadOnlyMutex.Unlock()
	if fake.MakeReadOnlyStub != nil {
		return fake.MakeReadOnlyStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.makeReadOnlyReturns.result1
}

func (fake *FakeLFClient) MakeReadOnlyCallCount() int {
	fake.makeReadOnlyMutex.RLock()
	defer fake.makeReadOnlyMutex.RUnlock()
	return len(fake.makeReadOnlyArgsForCall)
}

func (fake *FakeLFClient) MakeReadOnlyReturns(result1 error) {
	fake.MakeReadOnlyStub = nil
	fake.makeReadOnlyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLFClient) MakeReadOnlyReturnsOnCall(i int, result1 error) {
	fake.MakeReadOnlyStub = nil
	if fake.makeReadOnlyReturnsOnCall == nil {
		fake.makeReadOnlyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeReadOnlyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLFClient) Status() (*agent.DBStatus, error) {
	fake.statusMutex.Lock()
	ret, specificReturn := fake.statusReturnsOnCall[len(fake.statusArgsForCall)]
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct{}{})
	fake.recordInvocation("Status", []interface{}{})
	fake.statusMutex.Unlock()
	if fake.StatusStub != nil {
		return fake.StatusStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.statusReturns.result1, fake.statusReturns.result2
}

func (fake *FakeLFClient) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeLFClient) StatusReturns(result1 *agent.DBStatus, result2 error) {
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 *agent.DBStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeLFClient) StatusReturnsOnCall(i int, result1 *agent.DBStatus, result2 error) {
	fake.StatusStub = nil
	if fake.statusReturnsOnCall == nil {
		fake.statusReturnsOnCall = make(map[int]struct {
			result1 *agent.DBStatus
			result2 error
		})
	}
	fake.statusReturnsOnCall[i] = struct {
		result1 *agent.DBStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeLFClient) Sync(peerGtidExecuted string) error {
	fake.syncMutex.Lock()
	ret, specificReturn := fake.syncReturnsOnCall[len(fake.syncArgsForCall)]
	fake.syncArgsForCall = append(fake.syncArgsForCall, struct {
		peerGtidExecuted string
	}{peerGtidExecuted})
	fake.recordInvocation("Sync", []interface{}{peerGtidExecuted})
	fake.syncMutex.Unlock()
	if fake.SyncStub != nil {
		return fake.SyncStub(peerGtidExecuted)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.syncReturns.result1
}

func (fake *FakeLFClient) SyncCallCount() int {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return len(fake.syncArgsForCall)
}

func (fake *FakeLFClient) SyncArgsForCall(i int) string {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return fake.syncArgsForCall[i].peerGtidExecuted
}

func (fake *FakeLFClient) SyncReturns(result1 error) {
	fake.SyncStub = nil
	fake.syncReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLFClient) SyncReturnsOnCall(i int, result1 error) {
	fake.SyncStub = nil
	if fake.syncReturnsOnCall == nil {
		fake.syncReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.syncReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.hostnameMutex.RLock()
	defer fake.hostnameMutex.RUnlock()
	fake.makeLeaderMutex.RLock()
	defer fake.makeLeaderMutex.RUnlock()
	fake.makeFollowerMutex.RLock()
	defer fake.makeFollowerMutex.RUnlock()
	fake.makeReadOnlyMutex.RLock()
	defer fake.makeReadOnlyMutex.RUnlock()
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ command.LFClient = new(FakeLFClient)
